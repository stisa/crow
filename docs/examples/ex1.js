/* Generated by the Nim Compiler v0.16.0 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI50068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI50039 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI50036 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI50024 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI50023 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI50010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI50436 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12409 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3483 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3483.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3483, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI12409 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12409.node = NNI12409;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
NTI50023.base = NTI50024;
var NNI50010 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI138, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI50023, name: "Field1", sons: null}]};
NTI50010.node = NNI50010;
NTI50436.base = NTI50010;
NTI50039.base = NTI50010;
var NNI50036 = {kind: 1, offset: "s", len: 0, typ: NTI50039, name: "s", sons: null};
NTI50036.node = NNI50036;
var NNI3452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3452.node = NNI3452;
NTI3452.base = NTI3424;
var NNI3444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3444.node = NNI3444;
NTI3444.base = NTI3424;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3446.base = NTI3424;
NTI3448.base = NTI3446;
NTI50068.base = NTI50024;
function makeNimstrLit(c_13403) {

    var ln = c_13403.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13403.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18514, src_18515, ti_18516) {

var result_18829 = null;
switch (ti_18516.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18497(ti_18516))) {
result_18829 = src_18515;
}
else {
result_18829 = [src_18515[0], src_18515[1]];}


break;
case 19:       if (dest_18514 === null || dest_18514 === undefined) {
        dest_18514 = {};
      }
      else {
        for (var key in dest_18514) { delete dest_18514[key]; }
      }
      for (var key in src_18515) { dest_18514[key] = src_18515[key]; }
      result_18829 = dest_18514;
    
break;
case 18: case 17: if (!((ti_18516.base == null))) {
result_18829 = nimCopy(dest_18514, src_18515, ti_18516.base);
}
else {
if ((ti_18516.kind == 17)) {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {m_type: ti_18516} : dest_18514;}
else {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {} : dest_18514;}
}
nimCopyAux(result_18829, src_18515, ti_18516.node);

break;
case 24: case 4: case 27: case 16:       if (src_18515 === null) {
        result_18829 = null;
      }
      else {
        if (dest_18514 === null || dest_18514 === undefined) {
          dest_18514 = new Array(src_18515.length);
        }
        else {
          dest_18514.length = src_18515.length;
        }
        result_18829 = dest_18514;
        for (var i = 0; i < src_18515.length; ++i) {
          result_18829[i] = nimCopy(result_18829[i], src_18515[i], ti_18516.base);
        }
      }
    
break;
case 28:       if (src_18515 !== null) {
        result_18829 = src_18515.slice(0);
      }
    
break;
default: 
result_18829 = src_18515;
break;
}
return result_18829;
}
function eqStrings(a_16003, b_16004) {

    if (a_16003 == b_16004) return true;
    if ((!a_16003) || (!b_16004)) return false;
    var alen = a_16003.length;
    if (alen != b_16004.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16003[i] != b_16004[i]) return false;
    return true;
  }
function arrayConstr(len_19003, value_19004, typ_19005) {

      var result = new Array(len_19003);
      for (var i = 0; i < len_19003; ++i) result[i] = nimCopy(null, value_19004, typ_19005);
      return result;
    }
function cstrToNimstr(c_13603) {

  var ln = c_13603.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13603.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_13803) {

    var len = s_13803.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13803[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13803[i] < 128)
        asciiPart[i] = fcc(s_13803[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12806, ename_12807) {

e_12806.name = ename_12807;
if ((excHandler == 0)) {
unhandledException(e_12806);
}

e_12806.trace = nimCopy(null, rawwritestacktrace_12628(), NTI138);
throw e_12806;}
function chckIndx(i_19009, a_19010, b_19011) {

var Tmp1;
var result_19012 = 0;
BeforeRet: do {
if (!(a_19010 <= i_19009)) Tmp1 = false; else {Tmp1 = (i_19009 <= b_19011); }if (Tmp1) {
result_19012 = i_19009;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19012;
}
function addInt(a_16256, b_16257) {

      var result = a_16256 + b_16257;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function subInt(a_16403, b_16404) {

      var result = a_16403 - b_16404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
var nimvm_5887 = false;
var nim_program_result = 0;
var globalraisehook_10414 = [null];
var localraisehook_10419 = [null];
var outofmemhook_10422 = [null];
function isfatpointer_18497(ti_18499) {

var result_18500 = false;
BeforeRet: do {
result_18500 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18499.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18500;
}
function nimCopyAux(dest_18519, src_18520, n_18522) {

switch (n_18522.kind) {
case 0: 
break;
case 1:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
    
break;
case 2: L1: do {
var i_18815 = 0;
var HEX3Atmp_18817 = 0;
HEX3Atmp_18817 = (n_18522.len - 1);
var res_18820 = 0;
L2: do {
L3: while (true) {
if (!(res_18820 <= HEX3Atmp_18817)) break L3;
i_18815 = res_18820;
nimCopyAux(dest_18519, src_18520, n_18522.sons[i_18815]);
res_18820 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
      for (var i = 0; i < n_18522.sons.length; ++i) {
        nimCopyAux(dest_18519, src_18520, n_18522.sons[i][1]);
      }
    
break;
}
}
function add_10438(x_10441, x_10441_Idx, y_10442) {

        var len = x_10441[0].length-1;
        for (var i = 0; i < y_10442.length; ++i) {
          x_10441[0][len] = y_10442.charCodeAt(i);
          ++len;
        }
        x_10441[0][len] = 0
      }
function auxwritestacktrace_12404(f_12406) {

var Tmp3;
var result_12407 = [null];
var it_12415 = f_12406;
var i_12416 = 0;
var total_12417 = 0;
var tempframes_12421 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12409);
L1: do {
L2: while (true) {
if (!!((it_12415 == null))) Tmp3 = false; else {Tmp3 = (i_12416 <= 63); }if (!Tmp3) break L2;
tempframes_12421[i_12416].Field0 = it_12415.procname;
tempframes_12421[i_12416].Field1 = it_12415.line;
i_12416 += 1;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12415 == null))) break L5;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
result_12407[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12417 == i_12416))) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12407[0] = makeNimstrLit("(");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr(((total_12417 - i_12416))+"")); } else { result_12407[0] = cstrToNimstr(((total_12417 - i_12416))+"");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12407[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_12615 = 0;
var HEX3Atmp_12621 = 0;
HEX3Atmp_12621 = (i_12416 - 1);
var res_12624 = HEX3Atmp_12621;
L7: do {
L8: while (true) {
if (!(0 <= res_12624)) break L8;
j_12615 = res_12624;
add_10438(result_12407, 0, tempframes_12421[j_12615].Field0);
if ((0 < tempframes_12421[j_12615].Field1)) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12407[0] = makeNimstrLit(", line: ");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr((tempframes_12421[j_12615].Field1)+"")); } else { result_12407[0] = cstrToNimstr((tempframes_12421[j_12615].Field1)+"");};
}

if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12407[0] = makeNimstrLit("\x0A");};
res_12624 -= 1;
}
} while(false);
} while(false);
return result_12407[0];
}
function rawwritestacktrace_12628() {

var result_12630 = null;
if (!((framePtr == null))) {
result_12630 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_12404(framePtr)), NTI138);
}
else {
result_12630 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_12630;
}
function unhandledException(e_12654) {

var Tmp1;
var buf_12655 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12654.message, null))) Tmp1 = false; else {Tmp1 = !((e_12654.message[0] == 0)); }if (Tmp1) {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(e_12654.message); } else { buf_12655[0] = e_12654.message;};
}
else {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12655[0] = makeNimstrLit(" [");};
add_10438(buf_12655, 0, e_12654.name);
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12655[0] = makeNimstrLit("]\x0A");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(rawwritestacktrace_12628()); } else { buf_12655[0] = rawwritestacktrace_12628();};
var cbuf_12801 = toJSStr(buf_12655[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_12801);
  }
  else {
    throw cbuf_12801;
  }
  }
function raiseOverflow() {

var e_13236 = null;
e_13236 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13236.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13236, "OverflowError");
}
function raiseDivByZero() {

var e_13252 = null;
e_13252 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_13252.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13252, "DivByZeroError");
}
var objectid_41233 = /**/[0];
var state_58605 = /**/[{a0: 1773455756, a1: 4275166512}];
function gettime_61040() {

var result_61413 = null;
var F={procname:"times.getTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 586;
result_61413 = new Date();
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_61413;
}
var startmilsecs_61448 = /**/[gettime_61040()];
function initeventemitter_50418() {

var result_50420 = {s: null};
var F={procname:"events.initEventEmitter",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
F.line = 123;
result_50420.s = nimCopy(null, [], NTI50436);
framePtr = F.prev;
return result_50420;
}
function raiseIndexError() {

var e_13284 = null;
e_13284 = {m_type: NTI3452, parent: null, name: null, message: null, trace: null};
e_13284.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
raiseException(e_13284, "IndexError");
}
function geteventhandler_50255(emitter_50258, event_50259) {

var result_50260 = 0;
var F={procname:"events.getEventHandler",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
BeforeRet: do {
L1: do {
F.line = 95;
var k_50270 = 0;
F.line = 1926;
var HEX3Atmp_50272 = 0;
F.line = 95;
HEX3Atmp_50272 = (emitter_50258.s != null ? (emitter_50258.s.length-1) : -1);
F.line = 1908;
var res_50275 = 0;
L2: do {
F.line = 1909;
L3: while (true) {
if (!(res_50275 <= HEX3Atmp_50272)) break L3;
F.line = 1910;
k_50270 = res_50275;
if (eqStrings(emitter_50258.s[chckIndx(k_50270, 0, emitter_50258.s.length)-0].Field0, event_50259)) {
F.line = 96;
result_50260 = k_50270;
break BeforeRet;
}

res_50275 = addInt(res_50275, 1);
}
} while(false);
} while(false);
F.line = 97;
result_50260 = -1;
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_50260;
}
function sysfatal_21021(message_21027) {

var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
F.line = 2578;
var e_21029 = null;
e_21029 = {m_type: NTI3444, parent: null, name: null, message: null, trace: null};
F.line = 2580;
e_21029.message = nimCopy(null, message_21027, NTI138);
F.line = 2581;
raiseException(e_21029, "AssertionError");
framePtr = F.prev;
}
function raiseassert_21016(msg_21018) {

var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
sysfatal_21021(msg_21018);
framePtr = F.prev;
}
function failedassertimpl_21039(msg_21041) {

var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
raiseassert_21016(msg_21041);
framePtr = F.prev;
}
function emit_50302(emitter_50305, eventhandler_50307, args_50308) {

var F={procname:"events.emit",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
L1: do {
F.line = 113;
var fn_50402 = null;
F.line = 3495;
var HEX3Atmp_50404 = null;
F.line = 113;
HEX3Atmp_50404 = eventhandler_50307.Field1;
F.line = 3497;
var i_50407 = 0;
F.line = 3498;
var L_50409 = (HEX3Atmp_50404 != null ? HEX3Atmp_50404.length : 0);
L2: do {
F.line = 3499;
L3: while (true) {
if (!(i_50407 < L_50409)) break L3;
F.line = 3500;
fn_50402 = HEX3Atmp_50404[chckIndx(i_50407, 0, HEX3Atmp_50404.length)-0];
fn_50402(args_50308);
i_50407 = addInt(i_50407, 1);
if (!(((HEX3Atmp_50404 != null ? HEX3Atmp_50404.length : 0) == L_50409))) {
failedassertimpl_21039(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
}
function emit_50410(emitter_50413, event_50414, args_50415) {

var F={procname:"events.emit",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
F.line = 117;
var i_50416 = geteventhandler_50255(emitter_50413, event_50414);
if ((0 <= i_50416)) {
emit_50302(emitter_50413, emitter_50413.s[chckIndx(i_50416, 0, emitter_50413.s.length)-0], args_50415);
}

framePtr = F.prev;
}
function hash_41801(x_41803) {

var result_41804 = 0;
var F={procname:"hashes.hash",prev:framePtr,filename:"lib\\pure\\hashes.nim",line:0};
framePtr = F;
F.line = 109;
result_41804 = x_41803;
framePtr = F.prev;
return result_41804;
}
function isfilled_44465(hcode_44467) {

var result_44468 = false;
var F={procname:"tables.isFilled",prev:framePtr,filename:"lib\\pure\\collections\\tableimpl.nim",line:0};
framePtr = F;
F.line = 18;
result_44468 = !((hcode_44467 == 0));
framePtr = F.prev;
return result_44468;
}
function nexttry_44601(h_44603, maxhash_44604) {

var result_44605 = 0;
var F={procname:"tables.nextTry",prev:framePtr,filename:"lib\\pure\\collections\\tableimpl.nim",line:0};
framePtr = F;
F.line = 28;
result_44605 = (addInt(h_44603, 1) & maxhash_44604);
framePtr = F.prev;
return result_44605;
}
function rawget_48460(t_48465, key_48467, hc_48469, hc_48469_Idx) {

var Tmp3;
var result_48470 = 0;
var F={procname:"rawGet.rawGet",prev:framePtr,filename:"lib\\pure\\collections\\tableimpl.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 43;
hc_48469[hc_48469_Idx] = hash_41801(key_48467);
if ((hc_48469[hc_48469_Idx] == 0)) {
F.line = 45;
hc_48469[hc_48469_Idx] = 314159265;
}

F.line = 31;
var h_48472 = (hc_48469[hc_48469_Idx] & (t_48465.data != null ? (t_48465.data.length-1) : -1));
L1: do {
F.line = 32;
L2: while (true) {
if (!isfilled_44465(t_48465.data[chckIndx(h_48472, 0, t_48465.data.length)-0].Field0)) break L2;
if (!(t_48465.data[chckIndx(h_48472, 0, t_48465.data.length)-0].Field0 == hc_48469[hc_48469_Idx])) Tmp3 = false; else {Tmp3 = (t_48465.data[chckIndx(h_48472, 0, t_48465.data.length)-0].Field1 == key_48467); }if (Tmp3) {
F.line = 38;
result_48470 = h_48472;
break BeforeRet;
}

F.line = 39;
h_48472 = nexttry_44601(h_48472, (t_48465.data != null ? (t_48465.data.length-1) : -1));
}
} while(false);
F.line = 75;
result_48470 = subInt(-1, h_48472);
} while (false); 
framePtr = F.prev;
return result_48470;
}
function HEX5BHEX5D_48630(t_48636, key_48638) {

var result_48639 = 0;
var F={procname:"[].[]",prev:framePtr,filename:"lib\\pure\\collections\\tables.nim",line:0};
framePtr = F;
F.line = 146;
var hc_48641 = [0];
F.line = 147;
var index_48643 = rawget_48460(t_48636, key_48638, hc_48641, 0);
if ((0 <= index_48643)) {
F.line = 148;
result_48639 = t_48636.data[chckIndx(index_48643, 0, t_48636.data.length)-0].Field2;
}
else {
F.line = 151;
F.line = 2559;
var e_48803 = null;
e_48803 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null};
F.line = 2561;
e_48803.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(cstrToNimstr((key_48638)+"")), NTI138);
raiseException(e_48803, "KeyError");
}

framePtr = F.prev;
return result_48639;
}
function tojskc_48625(k_48627) {

var result_48628 = 0;
var F={procname:"keymap.toJSKC",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\keymap.nim",line:0};
framePtr = F;
F.line = 231;
result_48628 = HEX5BHEX5D_48630({data: [{Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 260, Field1: 260, Field2: 55}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 8, Field1: 8, Field2: 54}, {Field0: 9, Field1: 9, Field2: 53}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 13, Field1: 13, Field2: 52}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 16, Field1: 16, Field2: 112}, {Field0: 17, Field1: 17, Field2: 113}, {Field0: 18, Field1: 18, Field2: 114}, {Field0: 19, Field1: 19, Field2: 69}, {Field0: 20, Field1: 20, Field2: 65}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 27, Field1: 27, Field2: 51}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 32, Field1: 32, Field2: 1}, {Field0: 33, Field1: 33, Field2: 61}, {Field0: 34, Field1: 34, Field2: 62}, {Field0: 35, Field1: 35, Field2: 64}, {Field0: 36, Field1: 36, Field2: 63}, {Field0: 37, Field1: 37, Field2: 58}, {Field0: 38, Field1: 38, Field2: 60}, {Field0: 39, Field1: 39, Field2: 57}, {Field0: 40, Field1: 40, Field2: 59}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 44, Field1: 44, Field2: 68}, {Field0: 45, Field1: 45, Field2: 4}, {Field0: 46, Field1: 46, Field2: 56}, {Field0: 47, Field1: 47, Field2: 6}, {Field0: 48, Field1: 48, Field2: 7}, {Field0: 49, Field1: 49, Field2: 8}, {Field0: 50, Field1: 50, Field2: 9}, {Field0: 51, Field1: 51, Field2: 10}, {Field0: 52, Field1: 52, Field2: 11}, {Field0: 53, Field1: 53, Field2: 12}, {Field0: 54, Field1: 54, Field2: 13}, {Field0: 55, Field1: 55, Field2: 14}, {Field0: 56, Field1: 56, Field2: 15}, {Field0: 57, Field1: 57, Field2: 16}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 59, Field1: 59, Field2: 17}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 61, Field1: 61, Field2: 18}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 65, Field1: 65, Field2: 19}, {Field0: 66, Field1: 66, Field2: 20}, {Field0: 67, Field1: 67, Field2: 21}, {Field0: 68, Field1: 68, Field2: 22}, {Field0: 69, Field1: 69, Field2: 23}, {Field0: 70, Field1: 70, Field2: 24}, {Field0: 71, Field1: 71, Field2: 25}, {Field0: 72, Field1: 72, Field2: 26}, {Field0: 73, Field1: 73, Field2: 27}, {Field0: 74, Field1: 74, Field2: 28}, {Field0: 75, Field1: 75, Field2: 29}, {Field0: 76, Field1: 76, Field2: 30}, {Field0: 77, Field1: 77, Field2: 31}, {Field0: 78, Field1: 78, Field2: 32}, {Field0: 79, Field1: 79, Field2: 33}, {Field0: 80, Field1: 80, Field2: 34}, {Field0: 81, Field1: 81, Field2: 35}, {Field0: 82, Field1: 82, Field2: 36}, {Field0: 83, Field1: 83, Field2: 37}, {Field0: 84, Field1: 84, Field2: 38}, {Field0: 85, Field1: 85, Field2: 39}, {Field0: 86, Field1: 86, Field2: 40}, {Field0: 87, Field1: 87, Field2: 41}, {Field0: 88, Field1: 88, Field2: 42}, {Field0: 89, Field1: 89, Field2: 43}, {Field0: 90, Field1: 90, Field2: 44}, {Field0: 91, Field1: 91, Field2: 45}, {Field0: 92, Field1: 92, Field2: 46}, {Field0: 93, Field1: 93, Field2: 47}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 96, Field1: 96, Field2: 95}, {Field0: 97, Field1: 97, Field2: 96}, {Field0: 98, Field1: 98, Field2: 97}, {Field0: 99, Field1: 99, Field2: 98}, {Field0: 100, Field1: 100, Field2: 99}, {Field0: 101, Field1: 101, Field2: 100}, {Field0: 102, Field1: 102, Field2: 101}, {Field0: 103, Field1: 103, Field2: 102}, {Field0: 104, Field1: 104, Field2: 103}, {Field0: 105, Field1: 105, Field2: 104}, {Field0: 106, Field1: 106, Field2: 107}, {Field0: 107, Field1: 107, Field2: 109}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 109, Field1: 109, Field2: 108}, {Field0: 110, Field1: 110, Field2: 105}, {Field0: 111, Field1: 111, Field2: 106}, {Field0: 112, Field1: 112, Field2: 70}, {Field0: 113, Field1: 113, Field2: 71}, {Field0: 114, Field1: 114, Field2: 72}, {Field0: 115, Field1: 115, Field2: 73}, {Field0: 116, Field1: 116, Field2: 74}, {Field0: 117, Field1: 117, Field2: 75}, {Field0: 118, Field1: 118, Field2: 76}, {Field0: 119, Field1: 119, Field2: 77}, {Field0: 120, Field1: 120, Field2: 78}, {Field0: 121, Field1: 121, Field2: 79}, {Field0: 122, Field1: 122, Field2: 80}, {Field0: 123, Field1: 123, Field2: 81}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 144, Field1: 144, Field2: 67}, {Field0: 145, Field1: 145, Field2: 66}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 314159265, Field1: 0, Field2: 0}, {Field0: 161, Field1: 161, Field2: 49}, {Field0: 162, Field1: 162, Field2: 50}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}, {Field0: 0, Field1: 0, Field2: 0}], counter: 96}, k_48627);
framePtr = F.prev;
return result_48628;
}
function initevents_52201() {

function keyev_52204(e_52207) {

var F={procname:"initEvents.keyev",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
emit_50410(result_52203[0], makeNimstrLit("keyEv"), {kind: 0, key: tojskc_48625(e_52207.keyCode), mods: 0, button: 0, kmods: 0, pos: {Field0: 0.0, Field1: 0.0}, dt: 0.0});
framePtr = F.prev;
}
function mouseev_52211(e_52214) {

var F={procname:"initEvents.mouseev",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
emit_50410(result_52203[0], makeNimstrLit("click"), {kind: 2, button: 0, key: 0, mods: 0, kmods: 0, pos: {Field0: 0.0, Field1: 0.0}, dt: 0.0});
framePtr = F.prev;
}
var result_52203 = [{s: null}];
var F={procname:"events.initEvents",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
F.line = 146;
nimCopy(result_52203[0], initeventemitter_50418(), NTI50036);
document.addEventListener("keypress", keyev_52204, true);
document.addEventListener("click", mouseev_52211, true);
framePtr = F.prev;
return result_52203[0];
}
var evloop_70001 = /**/[initevents_52201()];
function initwindow_56206(w_56208, h_56209) {

var Tmp1;
var result_56210 = {ctx: null, width: 0, height: 0};
var F={procname:"windows.initWindow",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\windows.nim",line:0};
framePtr = F;
F.line = 18;
var canvas_56211 = document.getElementById("niwe-canvas");
if (!((w_56208 == -1))) Tmp1 = true; else {Tmp1 = !((h_56209 == -1)); }if (Tmp1) {
F.line = 20;
canvas_56211.width = w_56208;
F.line = 21;
canvas_56211.height = h_56209;
}

F.line = 23;
result_56210.ctx = canvas_56211.getContext("webgl");
F.line = 24;
result_56210.width = canvas_56211.clientWidth;
F.line = 25;
result_56210.height = canvas_56211.clientHeight;
framePtr = F.prev;
return result_56210;
}
var w_70002 = /**/[initwindow_56206(-1, -1)];
function rotl_58802(x_58804, k_58805) {

var result_58806 = 0;
var F={procname:"random.rotl",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
framePtr = F;
F.line = 44;
result_58806 = ((x_58804 << k_58805) | ((x_58804 >>> 0) >>> ((64 - k_58805) >>> 0)));
framePtr = F.prev;
return result_58806;
}
function next_58845(s_58848) {

var result_58849 = 0;
var F={procname:"random.next",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
framePtr = F;
F.line = 47;
var s0_58850 = s_58848.a0;
F.line = 48;
var s1_58851 = s_58848.a1;
F.line = 49;
result_58849 = ((s0_58850 + s1_58851) >>> 0);
F.line = 50;
s1_58851 = (s1_58851 ^ s0_58850);
F.line = 51;
s_58848.a0 = ((rotl_58802(s0_58850, 55) ^ s1_58851) ^ (s1_58851 << 14));
F.line = 52;
s_58848.a1 = rotl_58802(s1_58851, 36);
framePtr = F.prev;
return result_58849;
}
function random_59328(max_59330) {

var result_59331 = 0.0;
var F={procname:"random.random",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
framePtr = F;
F.line = 89;
var x_59333 = next_58845(state_58605[0]);
F.line = 91;
result_59331 = ((x_59333 / 4294967295) * max_59330);
framePtr = F.prev;
return result_59331;
}
w_70002[0].ctx.clearColor(random_59328(1.0000000000000000e+000), random_59328(1.0000000000000000e+000), random_59328(1.0000000000000000e+000), 1.0000000000000000e+000);
w_70002[0].ctx.clear(16384);
function initeventhandler_50049(name_50051) {

var result_50052 = {Field0: null, Field1: null};
var F={procname:"events.initEventHandler",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
F.line = 71;
result_50052.Field1 = nimCopy(null, [], NTI50068);
F.line = 72;
result_50052.Field0 = nimCopy(null, name_50051, NTI138);
framePtr = F.prev;
return result_50052;
}
function addhandler_50069(handler_50072, fn_50076) {

var F={procname:"events.addHandler",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
if (handler_50072.Field1 != null) { handler_50072.Field1.push(fn_50076); } else { handler_50072.Field1 = [fn_50076]; };
framePtr = F.prev;
}
function on_50279(emitter_50282, event_50283, fn_50287) {

var F={procname:"events.on",prev:framePtr,filename:"C:\\Dev\\proj\\crow\\crow\\events.nim",line:0};
framePtr = F;
F.line = 102;
var i_50288 = geteventhandler_50255(emitter_50282, event_50283);
if ((i_50288 < 0)) {
F.line = 104;
var eh_50289 = /**/[initeventhandler_50049(event_50283)];
addhandler_50069(eh_50289[0], fn_50287);
if (emitter_50282.s != null) { emitter_50282.s.push(eh_50289[0]); } else { emitter_50282.s = [eh_50289[0]]; };
}
else {
addhandler_50069(emitter_50282.s[chckIndx(i_50288, 0, emitter_50282.s.length)-0], fn_50287);
}

framePtr = F.prev;
}
function handlemouseevent_70003(e_70005) {

var F={procname:"ex1.handleMouseEvent",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
w_70002[0].ctx.clearColor(random_59328(1.0000000000000000e+000), random_59328(1.0000000000000000e+000), random_59328(1.0000000000000000e+000), 1.0000000000000000e+000);
w_70002[0].ctx.clear(16384);
framePtr = F.prev;
}
on_50279(evloop_70001[0], makeNimstrLit("click"), handlemouseevent_70003);
